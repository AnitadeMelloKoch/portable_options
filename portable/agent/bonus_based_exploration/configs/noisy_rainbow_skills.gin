# Hyperparameters for NoisyRainbow they follow those of Hessel et al. (2018), except for sticky_actions.
# which was False (not using sticky actions) in the original paper.
import dopamine.discrete_domains.atari_lib
import dopamine.replay_memory.prioritized_replay_buffer
import bonus_based_exploration.noisy_networks.noisy_rainbow_agent_for_skills
import bonus_based_exploration.run_experiment
import gin.tf.external_configurables

create_exploration_agent.agent_name = 'noisy_rainbow_for_skills'

NoisyRainbowAgentForSkills.num_atoms = 51
NoisyRainbowAgentForSkills.vmax = 10.
NoisyRainbowAgentForSkills.gamma = 0.99
NoisyRainbowAgentForSkills.update_horizon = 3
NoisyRainbowAgentForSkills.min_replay_history = 1000  # agent steps
NoisyRainbowAgentForSkills.update_period = 4
NoisyRainbowAgentForSkills.target_update_period = 8000  # agent steps
NoisyRainbowAgentForSkills.replay_scheme = 'prioritized'
NoisyRainbowAgentForSkills.tf_device = '/gpu:0'  # use '/cpu:*' for non-GPU version
NoisyRainbowAgentForSkills.optimizer = @tf.train.AdamOptimizer()
NoisyRainbowAgentForSkills.noise_distribution = %NoiseDistribution.FACTORISED

# Note these parameters are different from C51's.
tf.train.AdamOptimizer.learning_rate = 0.000625
tf.train.AdamOptimizer.epsilon = 0.00015

atari_lib.create_atari_environment.game_name = 'MontezumaRevenge'
# Sticky actions with probability 0.25, as suggested by (Machado et al., 2017).
atari_lib.create_atari_environment.sticky_actions = True
Runner.num_iterations = 200
Runner.training_steps = 250000  # agent steps
Runner.evaluation_steps = 125000  # agent steps
Runner.max_steps_per_episode = 27000  # agent steps

WrappedPrioritizedReplayBuffer.replay_capacity = 1000000
WrappedPrioritizedReplayBuffer.batch_size = 32

monte_with_skills.frame_stack = 1
monte_with_skills.episode_life=False
monte_with_skills.max_episode_steps = 27000